// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/scheduler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrainingScheduler_RegisterWorker_FullMethodName   = "/scheduler.TrainingScheduler/RegisterWorker"
	TrainingScheduler_RequestTask_FullMethodName      = "/scheduler.TrainingScheduler/RequestTask"
	TrainingScheduler_ReportTaskStatus_FullMethodName = "/scheduler.TrainingScheduler/ReportTaskStatus"
	TrainingScheduler_MonitorWorker_FullMethodName    = "/scheduler.TrainingScheduler/MonitorWorker"
	TrainingScheduler_ListWorkers_FullMethodName      = "/scheduler.TrainingScheduler/ListWorkers"
)

// TrainingSchedulerClient is the client API for TrainingScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for the training scheduler
type TrainingSchedulerClient interface {
	// Register a worker with the scheduler
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error)
	// Request a task to be assigned to a worker
	RequestTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task, error)
	// Report task status back to the scheduler
	ReportTaskStatus(ctx context.Context, in *TaskStatusUpdate, opts ...grpc.CallOption) (*TaskStatusResponse, error)
	// Stream for real-time monitoring of worker status
	MonitorWorker(ctx context.Context, in *WorkerStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkerStatusResponse], error)
	// List all registered workers
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
}

type trainingSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingSchedulerClient(cc grpc.ClientConnInterface) TrainingSchedulerClient {
	return &trainingSchedulerClient{cc}
}

func (c *trainingSchedulerClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWorkerResponse)
	err := c.cc.Invoke(ctx, TrainingScheduler_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSchedulerClient) RequestTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, TrainingScheduler_RequestTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSchedulerClient) ReportTaskStatus(ctx context.Context, in *TaskStatusUpdate, opts ...grpc.CallOption) (*TaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskStatusResponse)
	err := c.cc.Invoke(ctx, TrainingScheduler_ReportTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingSchedulerClient) MonitorWorker(ctx context.Context, in *WorkerStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkerStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TrainingScheduler_ServiceDesc.Streams[0], TrainingScheduler_MonitorWorker_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkerStatusRequest, WorkerStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TrainingScheduler_MonitorWorkerClient = grpc.ServerStreamingClient[WorkerStatusResponse]

func (c *trainingSchedulerClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, TrainingScheduler_ListWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingSchedulerServer is the server API for TrainingScheduler service.
// All implementations must embed UnimplementedTrainingSchedulerServer
// for forward compatibility.
//
// Service definition for the training scheduler
type TrainingSchedulerServer interface {
	// Register a worker with the scheduler
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error)
	// Request a task to be assigned to a worker
	RequestTask(context.Context, *TaskRequest) (*Task, error)
	// Report task status back to the scheduler
	ReportTaskStatus(context.Context, *TaskStatusUpdate) (*TaskStatusResponse, error)
	// Stream for real-time monitoring of worker status
	MonitorWorker(*WorkerStatusRequest, grpc.ServerStreamingServer[WorkerStatusResponse]) error
	// List all registered workers
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	mustEmbedUnimplementedTrainingSchedulerServer()
}

// UnimplementedTrainingSchedulerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainingSchedulerServer struct{}

func (UnimplementedTrainingSchedulerServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedTrainingSchedulerServer) RequestTask(context.Context, *TaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTask not implemented")
}
func (UnimplementedTrainingSchedulerServer) ReportTaskStatus(context.Context, *TaskStatusUpdate) (*TaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskStatus not implemented")
}
func (UnimplementedTrainingSchedulerServer) MonitorWorker(*WorkerStatusRequest, grpc.ServerStreamingServer[WorkerStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorWorker not implemented")
}
func (UnimplementedTrainingSchedulerServer) ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedTrainingSchedulerServer) mustEmbedUnimplementedTrainingSchedulerServer() {}
func (UnimplementedTrainingSchedulerServer) testEmbeddedByValue()                           {}

// UnsafeTrainingSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingSchedulerServer will
// result in compilation errors.
type UnsafeTrainingSchedulerServer interface {
	mustEmbedUnimplementedTrainingSchedulerServer()
}

func RegisterTrainingSchedulerServer(s grpc.ServiceRegistrar, srv TrainingSchedulerServer) {
	// If the following call pancis, it indicates UnimplementedTrainingSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrainingScheduler_ServiceDesc, srv)
}

func _TrainingScheduler_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSchedulerServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingScheduler_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSchedulerServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingScheduler_RequestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSchedulerServer).RequestTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingScheduler_RequestTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSchedulerServer).RequestTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingScheduler_ReportTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSchedulerServer).ReportTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingScheduler_ReportTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSchedulerServer).ReportTaskStatus(ctx, req.(*TaskStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingScheduler_MonitorWorker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrainingSchedulerServer).MonitorWorker(m, &grpc.GenericServerStream[WorkerStatusRequest, WorkerStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TrainingScheduler_MonitorWorkerServer = grpc.ServerStreamingServer[WorkerStatusResponse]

func _TrainingScheduler_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingSchedulerServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingScheduler_ListWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingSchedulerServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingScheduler_ServiceDesc is the grpc.ServiceDesc for TrainingScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.TrainingScheduler",
	HandlerType: (*TrainingSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _TrainingScheduler_RegisterWorker_Handler,
		},
		{
			MethodName: "RequestTask",
			Handler:    _TrainingScheduler_RequestTask_Handler,
		},
		{
			MethodName: "ReportTaskStatus",
			Handler:    _TrainingScheduler_ReportTaskStatus_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _TrainingScheduler_ListWorkers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorWorker",
			Handler:       _TrainingScheduler_MonitorWorker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/scheduler.proto",
}
